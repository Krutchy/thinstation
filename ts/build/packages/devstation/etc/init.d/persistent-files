#!/bin/bash

# Directory where the files will be copied and linked
BACKUP_DIR="/var/prstnt"

# Array of files to check and manage
FILES=( "/etc/passwd"
        "/etc/group"
        "/etc/shadow"
        "/etc/gshadow"
        "/etc/thinstation.env"
	"/etc/dnsmasq.conf")

monitor_files() {
    # Temporarily set IFS to newline to avoid splitting on spaces
    IFS=$'\n'

    # Monitor files for changes
    inotifywait -m -e modify,create "${FILES[@]}" | while read -r line; do
        # Use awk to split the last field (event) from the rest (file path)
        filepath=$(echo "$line" | awk '{$NF=""; print $0}' | sed 's/[[:space:]]*$//')
        event=$(echo "$line" | awk '{print $NF}')

        echo "Detected $event on $filepath. Running backup..."

        # Pass only the file path to the backup_file function
        backup_file "$filepath"
    done

    # Unset IFS to restore it to default behavior
    unset IFS
}


backup_file() {
    local SOURCE_FILE="${1}"

    # Construct the backup destination path
    local DEST_FILE="${BACKUP_DIR}/${SOURCE_FILE}"

    # Ensure the directory structure exists in the backup directory
    mkdir -p "$(dirname "${DEST_FILE}")"

    # Check if the source and destination files differ
    if ! cmp -s "${SOURCE_FILE}" "${DEST_FILE}"; then
        cp -a "${SOURCE_FILE}" "${DEST_FILE}"
    fi
}

backup_files() {
    # Backup each file using backup_file function
    for FILE in "${FILES[@]}"; do
        backup_file "${FILE}"
    done
}

restore_files() {
    for FILE in "${FILES[@]}"; do
        local DEST_FILE="${BACKUP_DIR}/${FILE}"

        if [ -f "${DEST_FILE}" ]; then
            # Ensure the directory structure exists in the target directory
            mkdir -p "$(dirname "${FILE}")"
            cp -a "${DEST_FILE}" "${FILE}"
        fi
    done
}

firstrun() {
    # Update security files with the new Administrative User
    if [ -f "${BACKUP_DIR}/firstrun" ]; then
        # Update root password hash
        local rstring="$(grep -E '^root' "${BACKUP_DIR}/firstrun")"
        local rpass="$(echo "${rstring}" | cut -d ':' -f2)"
        /sbin/usermod -p "${rpass}" root

        # Update Admin user name and password hash
        local ustring="$(grep -Ev '^root' "${BACKUP_DIR}/firstrun")"
        local user="$(echo "${ustring}" | cut -d ':' -f1)"
        local pass="$(echo "${ustring}" | cut -d ':' -f2)"

        /sbin/groupmod -n "${user}" tsuser
        /sbin/usermod -l "${user}" -m -d /home/"${user}" tsuser
        /sbin/usermod -c "${user}" "${user}"
        /sbin/usermod -p "${pass}" "${user}"

        # Replace 'tsuser' in the environment file with new username
        sed -i -e "s/tsuser/${user}/g" /etc/thinstation.env
        rmdir /home/tsuser

        # Clean up the first run file and back up other files
        rm "${BACKUP_DIR}/firstrun"
        backup_files
    fi
}

case $1 in
    backup)
        backup_files
        ;;
    restore)
        restore_files
        firstrun
        ;;
    monitor)
        monitor_files
        ;;
    *)
        exit 0
        ;;
esac
